---
# Additional Facts
- name: Gather EC2 facts
  action: ec2_facts
  
# Dependencies
- name: Install JNA
  apt: name=libjna-java update_cache=yes state=latest
 
- name: Install NTP daemon
  apt: pkg=ntp state=present

- name: Ensure NTP daemon autostart
  service: name=ntp enabled=yes

- name: Start NTP daemon
  service: name=ntp state=started
 
# Check whether cassandra is already installed
- name: Detect existing Cassandra installation at /opt/cassandra
  stat: path=/opt/cassandra
  register: state_of_cassandra_installation

# Cassandra download and installation
- name: Download Cassandra
  get_url: url=http://www.gtlib.gatech.edu/pub/apache/cassandra/2.1.3/apache-cassandra-2.1.3-bin.tar.gz dest=/tmp/cassandra.tar.gz
  when: state_of_cassandra_installation.stat.isdir is undefined

- name: Unpack Cassandra
  unarchive: src=/tmp/cassandra.tar.gz dest=/opt copy=no
  when: state_of_cassandra_installation.stat.isdir is undefined

- name: Link Cassandra to /opt/cassandra
  file: "src=/opt/apache-cassandra-2.1.3 dest=/opt/cassandra state=link owner=ubuntu group=ubuntu"
  when: state_of_cassandra_installation.stat.isdir is undefined

# Folder setup
- name: Create Cassandra data and log directories
  file: "path={{ item }} state=directory owner=ubuntu group=ubuntu"
  with_items:
    - /var/log/cassandra
    - /mnt/cassandra/data
    - /mnt/cassandra/commitlog
    - /mnt/cassandra/saved_caches

# Dependency setup and configuration
- name: Link JNA
  file: "src=/usr/share/java/{{ item }} dest=/opt/cassandra/lib/{{ item }} state=link"
  with_items:
    - jna.jar
    - jna-platform.jar

- name: Copy Cassandra configuration files
  template: src={{ item }}.j2 dest=/opt/cassandra/conf/{{ item }}
  with_items:
    - cassandra-env.sh
    - cassandra.yaml
    - logback.xml

- name: Deploy JMX authentication password file
  template: src=jmxremote.password.j2 dest=/opt/cassandra/conf/jmxremote.password mode=600 owner=ubuntu group=ubuntu

- name: Make sure JMX user has readwrite permissions
  lineinfile: "dest=/usr/lib/jvm/java-7-oracle/jre/lib/management/jmxremote.access line='{{ jmx_username }} readwrite'"

# Owner/Group Security
- name: Set user/group on Cassandra installation
  file: path=/opt/apache-cassandra-2.1.3 recurse=yes owner=ubuntu group=ubuntu
  
- name: Deploy Cassandra init.d script
  template: src=cassandra.j2 dest=/etc/init.d/cassandra mode=u=rwx,g=rx,o=rx
  
- name: Register Cassandra service for boot-time launch
  shell: update-rc.d cassandra defaults
  
- name: Launch Cassandra
  service: name=cassandra state=started

# Setup authentication

- name: Copy authentication setup script
  template: src={{ item }}.j2 dest=/opt/cassandra/{{ item }} mode=600 owner=root group=root
  with_items:
    - check_connection.cql
    - setup_authentication.cql
    - disable_default_user.cql
  run_once: true

- pause: minutes=1 #wait for 1 minute to let the cluster come up
  run_once: true

- name: Check if new authentication setup is already done
  shell: /opt/cassandra/bin/cqlsh -f /opt/cassandra/check_connection.cql -u {{ cluster_username }} -p {{ cluster_password }}
  register: state_of_authentication_setup
  ignore_errors: true
  run_once: true

#- name: Setup new user/password
#  shell: /opt/cassandra/bin/cqlsh -f /opt/cassandra/setup_authentication.cql -u cassandra -p cassandra
#  when: state_of_authentication_setup|failed
#  run_once: true
  
#- name: Disable default user/password
#  shell: /opt/cassandra/bin/cqlsh -f /opt/cassandra/disable_default_user.cql -u {{ cluster_username }} -p {{ cluster_password }}
#  when: state_of_authentication_setup|failed
#  run_once: true

- name: Remove authentication setup script
  file: path=/opt/cassandra/{{ item }} state=absent
  with_items:
    - check_connection.cql
    - setup_authentication.cql
    - disable_default_user.cql
  run_once: true

#- name: Run nodetool repair on all nodes to make sure authentication information is consistent
#  shell: /opt/cassandra/bin/nodetool -u {{ jmx_username }} -pw {{ jmx_password }} repair -local 